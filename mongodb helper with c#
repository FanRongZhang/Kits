
    /// <summary>
    /// read and write data to mongodb
    /// </summary>
    /// <typeparam name="T">class type,here,i let each type corresponding one scheme of saved file like the table of rational database</typeparam>
    public sealed class MongoHelper<T> where T :class
    {
        const string connectionString = "mongodb://everyonewantotravel:nosqlmongodblogin@10.160.55.79:2013";
        //const string connectionString = "mongodb://everyonewantotravel:nosqlmongodblogin@112.124.55.197:2013";
        string collectionName = null;
        const string dbname = "travel-major-db";

        MongoServer server;
        MongoDatabase database;

        public MongoHelper()
        {
            collectionName = typeof(T).Name.ToLower();

            server = new MongoClient(connectionString).GetServer();

            database = server.GetDatabase(dbname);

            //Console.WriteLine("state:"+server.State.ToString()); in here,the state is disconnected
        }

        #region Inert
        public  WriteConcernResult InsertOne(T entity)
        {
            WriteConcernResult result = null;

            if (null == entity)
            {
                return null;
            }


            using (server.RequestStart(database))//开始连接数据库。
            {
                MongoCollection<BsonDocument> myCollection = database.GetCollection<BsonDocument>(collectionName);
                result = myCollection.Insert(entity);
            }

            return result;
        }

        public IEnumerable<WriteConcernResult> InsertAll(IEnumerable<T> entitys)
        {
            IEnumerable<WriteConcernResult> result = null;

            if (null == entitys)
            {
                return null;
            }

            using (server.RequestStart(database))//开始连接数据库。
            {
                MongoCollection<BsonDocument> myCollection = database.GetCollection<BsonDocument>(collectionName);
                result = myCollection.InsertBatch(entitys);
            }

            return result;
        }

        #endregion


        #region madify

        /// <summary>
        /// convert one object of type is T to IMongoUpdate
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        IMongoUpdate GetIMongoUpdate(T entity)
        {
            System.Reflection.PropertyInfo[] pS = entity.GetType().GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);
            Dictionary<string, object> dic = new Dictionary<string, object>();
            foreach (System.Reflection.PropertyInfo pInfo in pS) {
                if(pInfo.Name!="_id")
                    dic[pInfo.Name] = pInfo.GetValue(entity, null);
            }
            var bsonDoc = BsonSerializer.Deserialize<BsonDocument>(Maticsoft.Common.Json.jss.Serialize(dic));
            IMongoUpdate updateDoc = new UpdateDocument("$set", bsonDoc);
            return updateDoc;
        }


        /// <summary>
        /// convert one object of type is KeyValuePair<string, int> to IMongoUpdate
        /// </summary>
        /// <param name="kv"></param>
        /// <returns></returns>
        IMongoUpdate GetIMongoInc(KeyValuePair<string, int> kv)
        {
            //var bsonDoc = BsonSerializer.Deserialize<BsonDocument>(Newtonsoft.Json.JsonConvert.SerializeObject(kv));
            var bsonDoc = BsonSerializer.Deserialize<BsonDocument>("{\"" + kv.Key + "\":" + kv.Value.ToString() + "}");
            IMongoUpdate updateDoc = new UpdateDocument("$inc", bsonDoc);
            return updateDoc;
        }
        
        /// <summary>
        /// update the record with a json format key-value pair
        /// </summary>
        /// <param name="query"></param>
        /// <param name="kv"></param>
        /// <returns></returns>
        public WriteConcernResult Inc(IMongoQuery query, KeyValuePair<string,int> kv) {

            WriteConcernResult result;

            using (server.RequestStart(database))
            {
                MongoCollection<BsonDocument> myCollection = database.GetCollection<BsonDocument>(collectionName);
                result = myCollection.Update(query, GetIMongoInc(kv));
            }

            return result;
        }


        /// <summary>
        /// update all records of accord with the conditon
        /// </summary>
        /// <param name="query">条件查询。 调用示例：Query.Matches("Title", "感冒") 或者 Query.EQ("Title", "感冒") 或者Query.And(Query.Matches("Title", "感冒"),Query.EQ("Author", "yanc")) 等等</param>
        /// <param name="entity"></param>
        /// <returns></returns>
        public WriteConcernResult Update(IMongoQuery query, T entity)
        {
            if (null == query || null == entity)
            {
                return null;
            }
            return Update(query, GetIMongoUpdate(entity),UpdateFlags.Multi);
        }

        /// <summary>
        /// update one exists record,or create one
        /// </summary>
        /// <param name="query"></param>
        /// <param name="entity"></param>
        /// <returns></returns>
        public WriteConcernResult UpdateAndCreate(IMongoQuery query, T entity)
        {
            if (null == query || null == entity)
            {
                return null;
            }
            return Update(query, GetIMongoUpdate(entity),UpdateFlags.Upsert);
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="query">条件查询。 调用示例：Query.Matches("Title", "感冒") 或者 Query.EQ("Title", "感冒") 或者Query.And(Query.Matches("Title", "感冒"),Query.EQ("Author", "yanc")) 等等</param>
        /// <param name="update">更新设置。调用示例：Update.Set("Title", "yanc") 或者 Update.Set("Title", "yanc").Set("Author", "yanc2") 等等</param>
        /// <returns></returns>
        WriteConcernResult Update(IMongoQuery query, IMongoUpdate update,UpdateFlags flag)
        {
            WriteConcernResult result;

            if (null == query || null == update)
            {
                return null;
            }

            using (server.RequestStart(database))//开始连接数据库。
            {
                MongoCollection<BsonDocument> myCollection = database.GetCollection<BsonDocument>(collectionName);
                result = myCollection.Update(query, update, flag);
            }

            return result;
        }

        #endregion


        #region Delete 
        public WriteConcernResult Delete(ObjectId _id)
        {
            WriteConcernResult result;
            using (server.RequestStart(database))//开始连接数据库。
            {
                MongoCollection<BsonDocument> myCollection = database.GetCollection<BsonDocument>(collectionName);

                result = myCollection.Remove(Query.EQ("_id", _id));
            }

            return result;

        }

        /// <summary>
        /// delete all
        /// </summary>
        /// <returns></returns>
        public WriteConcernResult DeleteAll()
        {
            return DeleteAll(null);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="query">条件查询,可为NULL。 调用示例：Query.Matches("Title", "感冒") 或者 Query.EQ("Title", "感冒") 或者Query.And(Query.Matches("Title", "感冒"),Query.EQ("Author", "yanc")) 等等</param>
        /// <returns></returns>
        public WriteConcernResult DeleteAll(IMongoQuery query)
        {
            WriteConcernResult result;

            using (server.RequestStart(database))
            {
                MongoCollection<BsonDocument> myCollection = database.GetCollection<BsonDocument>(collectionName);

                if (null == query)
                {
                    result = database.DropCollection(collectionName) as WriteConcernResult;
                }
                else
                {
                    result = myCollection.Remove(query);
                }
            }

            return result;

        }

        #endregion


        #region get single record

        public T GetOne( string _id)
        {
            T result = default(T);
            ObjectId id;
            if (!ObjectId.TryParse(_id, out id))
            {
                return default(T);
            }

            using (server.RequestStart(database))
            {
                MongoCollection<BsonDocument> myCollection = database.GetCollection<BsonDocument>(collectionName);


                result = myCollection.FindOneAs<T>(Query.EQ("_id", id));
            }

            return result;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="query">条件查询。 调用示例：Query.Matches("Title", "感冒") 或者 Query.EQ("Title", "感冒") 或者Query.And(Query.Matches("Title", "感冒"),Query.EQ("Author", "yanc")) 等等</param>
        /// <returns></returns>
        public T GetOne(IMongoQuery query)
        {
            T result = default(T);

            using (server.RequestStart(database))//开始连接数据库。
            {
                MongoCollection<BsonDocument> myCollection = database.GetCollection<BsonDocument>(collectionName);

                if (null == query)
                {
                    result = myCollection.FindOneAs<T>();
                }
                else
                {
                    result = myCollection.FindOneAs<T>(query);
                }
            }

            return result;
        }

        #endregion


        #region get multiple records

        /// <summary>
        /// 
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="collectionName"></param>
        /// <returns></returns>
        public List<T> GetAll()
        {
            List<T> result = new List<T>();

            using (server.RequestStart(database))
            {
                MongoCollection<BsonDocument> myCollection = database.GetCollection<BsonDocument>(collectionName);

                var l = myCollection.FindAllAs<T>();

                if (l != null && l.Count() > 0)
                {
                    foreach (T entity in l)
                    {
                        result.Add(entity);
                    }
                }
            }

            return result;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="query">条件查询，可为NULL。 调用示例：Query.Matches("Title", "感冒") 或者 Query.EQ("Title", "感冒") 或者Query.And(Query.Matches("Title", "感冒"),Query.EQ("Author", "yanc")) 等等</param>
        /// <param name="pagerInfo">分页，可为NULL，查询时候已经处理了分页的数据总条数和总页数</param>
        /// <param name="sortBy">排序用的，可为NULL。调用示例：SortBy.Descending("Title") 或者 SortBy.Descending("Title").Ascending("Author")等等</param>
        /// <param name="fields">只返回所需要的字段的数据，可为NULL。调用示例："Title" 或者 new string[] { "Title", "Author" }等等</param>
        /// <returns></returns>
        public  List<T> GetAll(IMongoQuery query, PagerInfo pagerInfo, IMongoSortBy sortBy, params string[] fields)
        {
            List<T> result = new List<T>();

            using (server.RequestStart(database))//开始连接数据库。
            {
                MongoCollection<BsonDocument> myCollection = database.GetCollection<BsonDocument>(collectionName);

                MongoCursor<T> myCursor;

                if (null == query)
                {
                    myCursor = myCollection.FindAllAs<T>();
                }
                else
                {
                    myCursor = myCollection.FindAs<T>(query);
                }

                if (null != sortBy)
                {
                    myCursor.SetSortOrder(sortBy);
                }

                if (null != fields)
                {
                    myCursor.SetFields(fields);
                }

                if (pagerInfo != null)
                {
                    //克隆一个CURSOR进行COUNT()统计
                    var cloneCursor = myCursor.Clone<T>();
                    pagerInfo.TotalCount = cloneCursor.Count();
                    pagerInfo.TotalPage = pagerInfo.TotalCount % pagerInfo.PageSize == 0 ? pagerInfo.TotalCount / pagerInfo.PageSize : ((long)Math.Floor((double)(pagerInfo.TotalCount / (long)pagerInfo.PageSize)) + 1);

                    myCursor = myCursor.SetSkip((pagerInfo.Page - 1) * pagerInfo.PageSize).SetLimit(pagerInfo.PageSize);
                }

                foreach (T entity in myCursor)
                {
                    result.Add(entity);
                }


            }

            return result;
        }

        #endregion

        #region make group
        public IEnumerable<BsonDocument> Group(IMongoQuery query, BsonJavaScript keyFunction, BsonJavaScript reduce, BsonJavaScript finalize)
        {
            IEnumerable<BsonDocument> result;
            using (server.RequestStart(database))
            {
                MongoCollection<BsonDocument> myCollection = database.GetCollection<BsonDocument>(collectionName);
                result = myCollection.Group(query, keyFunction, new BsonDocument(), reduce, finalize);
            }

            return result;
        }
        #endregion


        #region create index

        public void CreateIndex(params string[] keyNames)
        {
            if (null == keyNames)
            {
                return;
            }

            using (server.RequestStart(database))
            {
                MongoCollection<BsonDocument> myCollection = database.GetCollection<BsonDocument>(collectionName);
                if (!myCollection.IndexExists(keyNames))
                {
                    myCollection.EnsureIndex(keyNames);
                }
            }

        }

        #endregion




    }
